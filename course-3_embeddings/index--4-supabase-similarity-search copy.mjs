import OpenAI from 'openai'
import dotenv from 'dotenv'
import path from 'path'
import { createClient } from '@supabase/supabase-js'

dotenv.config({ path: path.resolve('./.env') });


// SUPABASE VECTOR DB CONNECTION
// vector extsnion in SUPABASE DB enabled.

const supabaseUrl = process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_KEY
const supabase = createClient(supabaseUrl, supabaseKey)

// Run the above command in SQL Editor in Supabase to create document/table.

// ------------------------------------------------


const openai = new OpenAI();

// Stored in DB.
// [
//   "Beyond Mars (1 hr 15 min): Join space enthusiasts as they speculate about extraterrestrial life and the mysteries of distant planets.",
//   "Jazz under stars (55 min): Experience a captivating night in New Orleans, where jazz melodies echo under the moonlit sky.",
//   "Mysteries of the deep (1 hr 30 min): Dive with marine explorers into the uncharted caves of our oceans and uncover their hidden wonders.",
//   "Rediscovering lost melodies (48 min): Journey through time to explore the resurgence of vinyl culture and its timeless appeal.",
//   "Tales from the tech frontier (1 hr 5 min): Navigate the complex terrain of AI ethics, understanding its implications and challenges.",
//   "The soundscape of silence (30 min): Traverse the globe with sonic explorers to find the world's most serene and silent spots.",
//   "Decoding dreams (1 hr 22 min): Step into the realm of the subconscious, deciphering the intricate narratives woven by our dreams.",
//   "Time capsules (50 min): Revel in the bizarre, endearing, and profound discoveries that unveil the quirks of a century past.",
//   "Frozen in time (1 hr 40 min): Embark on an icy expedition, unearthing secrets hidden within the majestic ancient glaciers.",
//   "Songs of the Sea (1 hr): Dive deep with marine biologists to understand the intricate whale songs echoing in our vast oceans."
// ];


// User query about podcasts
const query = "Jammin' in the Big Easy";

// Run SQL Command To `Create a function to search for documents` in Supabase DB SQL editor.
main(query);


/**
 * Performs a semantic similarity search on a database of text chunks using the OpenAI text embedding model. Create an embedding from the user input and return a 
 * semantically matching text chunk from the database 
 *
 * @param {string} input - The user's query text to search for.
 * @returns {Promise<{ data: any[] }>} - The data containing the most semantically similar text chunk from the database.
 */
async function main(input) {
  // Create a vector embedding representing the input text
  const embeddingResponse = await openai.embeddings.create({
    model: "text-embedding-ada-002",
    input,
  }); 
  
  // The vector generated by OpenAI
  const embedding = embeddingResponse.data[0].embedding;
  
  // Query Supabase for nearest vector match
  const { data } = await supabase.rpc('match_documents', {
    query_embedding: embedding,
    match_threshold: 0.50,
    match_count: 1
  });
  console.log(data);
}

// ------------------------------------------------------------------------------------

// Query Supabase and return a semantically matching text chunk
/**
 * Performs a semantic similarity search on a database of text chunks using the OpenAI text embedding model. Retrieves the most semantically similar text chunk from the database based on the provided embedding.
 *
 * @param {number[]} embedding - The vector embedding representing the input text.
 * @returns {Promise<string>} - The most semantically similar text chunk from the database.
 */
async function findNearestMatch(embedding) {
  const { data } = await supabase.rpc('match_documents', {
    query_embedding: embedding,
    match_threshold: 0.50,
    match_count: 1
  });
  return data[0].content;
}
async function findNearestMatch(embedding) {
  const { data } = await supabase.rpc('match_documents', {
    query_embedding: embedding,
    match_threshold: 0.50,
    match_count: 1
  });
  return data[0].content;
}